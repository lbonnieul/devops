services:
    backend: #the image for the java api
        build:
          context: ./backend #the path to the folder for the backend files
          dockerfile: Dockerfile #path of the backend Dockerfile
        env_file: ".env"
        environment:
        - DB_NAME=${DATABASE_NAME}
        - DB_USER=${DATABASE_USR}
        - DB_PASSWORD=${DATABASE_PWD}
        networks: #networks to be connected to (to communicate with other containers)
        - network-back-db
        - network-front-back 
        depends_on:
        - database #because the backend needs the database to be up before uping

    database: #the image for the postgres database
        build:
          context: ./database #the path to the folder for the database files
          dockerfile: Dockerfile #path of the database Dockerfile
        env_file: ".env"
        environment: #env variables
        - POSTGRES_DB=${DATABASE_NAME}
        - POSTGRES_USER=${DATABASE_USR}
        - POSTGRES_PASSWORD=${DATABASE_PWD}
        networks:
        - network-back-db #networks to be connected to (to communicate with other containers)
        volumes:
        - volume:/var/lib/postgresql/data #volume for data persistence

    frontend: #the image for the frontend (reverse proxy apache server)
        build:
          context: ./frontend #the path to the folder for the frontend files
          dockerfile: Dockerfile #path of the frontend Dockerfile
        ports: 
        - 80:80 #port mapping for apache
        networks:
        - network-front-back #networks to be connected to (to communicate with other containers)
        depends_on:
        - backend #because the frontend needs the backend to be up before uping

networks:
    network-back-db:
    network-front-back:

volumes:
    volume:
